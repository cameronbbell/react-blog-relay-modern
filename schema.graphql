schema {
  query: RootQuery
  mutation: RootMutation
}

type Comments implements Node {
  id: ID!
  post_id: Int!
  posted_by_user_id: Int!
  created_at: String!
  body: String!
}

# A connection to a list of items.
type CommentsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommentsEdge]
}

# An edge in a connection.
type CommentsEdge {
  # The item at the end of the edge
  node: Comments

  # A cursor for use in pagination
  cursor: String!
}

interface Node {
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  id: ID!
  created_at: String!
  posted_by_user_id: Int!
  title: String!
  body: String!
  link_text: String!
  comments(after: String, first: Int): CommentsConnection
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

# The root mutation
type RootMutation {
  createPost(body: String!, title: String!): Post
}

# The root query
type RootQuery {
  viewer: Node
  node(id: ID!): Node
  posts(after: String, first: Int, linkText: String): PostConnection
}

type User implements Node {
  id: ID!
  name: String!
  role: String!
  posts(after: String, first: Int): PostConnection
}
